Respuestas practica 3 LPP

18. La salida muestra el hola mundo con una flecha debajo que siempre nos indica el valor de la ultima expresion evaluada, que en este caso es nulo.

21. Las comillas dobles "" traducen el \t \n como tabulador y el retorno de carro, las comillas simples son literales no traducen el \t y el \n. Por ejemplo #puts "holamundo\t\n" nos mostraria por pantalla holamundo y traduciria el tabulador y el retorno de carro en cambio #puts 'holamundo\t\n' Mostraria por pantalla holamundo\t\n.

22. "%q" actúa como comillas simples. No traduce el \n ya que actua como comillas simples.


23. "%Q" actúa como comillas dobles. Traduce el \n.

24. En "c" queda "--4--\n--2--\n", una cadena de caracteres en la que se ha sustituído el valor de "a" y de "b". El c= << HERE indica que lo que vas a escribir a continuacion hasta donde vuelvas a escribir HERE se guarde en la variable c.

25. Hace lo mismo de arriba pero interpreta lo que hay dentro como si fuera comillas simples por lo que quedaria de resultado "--\#{a}--\n--\#{b}--\n". No sustituye los \#{a}

26.

s = "hello" -> Guarda en la variable s la cadena hello

s[0,2] -> El primer numero indica que se posiciona en el primer caracter de la cadena y el segundo numero cuantos caracteres a partir de ahi quieres imprimir. "he"

s[-1,1] -> Se posiciona en la posicion anterior al primer caracter por lo que se posiciona en el ultimo y imprime 1 caracter por lo que quedaria "o"

s[0,10] -> Se posiciona en la primera posicion y imprime 10 caracteres pero como solo hay 5 imprime "hello"

27. el g << " world" añade a continuacion de g si existe algo la cadena que se indica a continuacion. Quedaria "hello world"

28. >> e = '.'*3

Indica que quieres guardar la expresion '.' multiplicada por 3 por lo que quedaria "..."

29.

Interpreteria la expresion entre comillas que daria de resultado 2 y la coloca en la misma cadena 3 veces. "2 2 2"

30. Se crea un array con los componentes de cada palabra separada por espacios en corchetes. ["this", "is", "a", "test"]

31. %w[\t \n] -> crea un array con cada elemento interpretando cada elemento como si fueran comillas simples

32. %W[\t \n] -> crea un array con cada elemento interpretando cada elemento como si fueran comillas dobles

33. nils = Array.new(3) -> crea un array con 3 elementos y como no se le ha indicado nada le pone valores nulos [nil, nil, nil] 

34. zeros = Array.new(3,0) -> crea un array con 3 elementos de 0     [0, 0, 0] 

35. En b queda el contenido de x ya que se lo pasamos por parametro a la creacion del array [[1, 2], [3, 4]] 

36. En c queda los 3 elementos de la operacion que le indicamos entre llaves [0, 2, 4] 

37. >> a[1,1]
=> [“b”]

>> a[-2,2]
=> ["d", "e"]

>> a[0..2]
=> ["a", "b", "c"]

>> a[0...1]
=> [“a”]

>> a[-2..-1]
=> ["d", "e"]

38. 
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=> ["A", "B", "c", "d", "e"]

>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=> ["A", "B", "C", "D", "E"]

>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> [1, 2, 3, "A", "B", "C", "D", "E"]

>> a[0,2] = []
=> []
>> a
=> [3, "A", "B", "C", "D", "E"]

>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=> [3, "A", "B", "C", "D", "Z"]

>> a[-2,2] = nil
=> nil
>> a
=> [3, "A", "B", "C", nil]

39. 
>> a = (1...4).to_a
=> [1, 2, 3]

>> a = a + [4, 5]
=> [1, 2, 3, 4, 5]

>> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]

40. 
>> x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"]

>> x = x - %w{b c d}
=> ["a", "a"]

41. 
>> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]

42. 
>> a = []
=> []

>> a << 1
=> [1] 

>> a << 2 << 3
=> [1, 2, 3]

>> a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]]

>> a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43. 
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]

>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]

>> c = a | b
=> [1, 2, 3, 4, 5]

>> d = b | a
=> [5, 4, 3, 2, 1]

>> e = a & b
=> [2, 3, 4]

>> f = b & a
=> [4, 3, 2]

44. 
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

>> b = 1...10
=> 1....10
>> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]

>> b.include? 10
=> false

>> b.include? 8
=> true

>> b.step(2) {|x| print "#{x} " }
=> “1 3 5 7 9 "

45. 
>> r = 0...100
=> 0....100
>> r.member? 50
=> true
>> r.include? 99.9
=> true
>> r.member? 99.9
=> true

46. 
>> true.class
=> TrueClass

>> false.class
=> FalseClass

>> puts "hello" if 0
=> “hello”

>> puts "hello" if nil
=> nil

>> puts "hello" if ""
=> “hello”

47. 
>> x = :sym
=> :sym
>> x.class
=>Symbol

>> x == ’sym’
=> false

>> x == :sym
=> false 

>> z = :’a long symbol’
=> :"a long symbol"

>> z.class
=>Symbol

>> x == ’sym’.to_sym
=> true

>> x.to_s == ’sym’
=> true 

48.
>> s = "Ruby"
=> "Ruby"

>> t = s
=> "Ruby"

>> t[-1] = ""
=> ""

>> print s
=> Rub

>> t = "Java"
=> "Java"

>> print s, t
=> “RubJava”

49.
>> "%d %s" % [3, "rubies"]
=> 3 rubies

50.
>> x, y = 4, 5
=> [4, 5]

>> z = x > y ? x : y
=> 5

>> x,y,z = [1,2,3]
=>[1, 2, 3]

51.
>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}

>> x.keys
=> [:a, :b]

>> x.values
=> [1, 2]

>> x[:c] = 3
=> 3

>> x
=> {:a=>1, :b=>2, :c=>3}

>> x.delete(’a’)
=> nil

>> x
=>

>> x.delete(:a)
=> 1

>> x
=> {:a=>1, :b=>2, :c=>3}

>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}

>> x.delete_if { |k,v| v % 2 == 0 }
=> {:a=>1}

>> x
=> {:a=>1}


52. Le da el control al campo yield que esté en el bloque de la funcion

53. La sentencia crea un Hash de nombre “counts” usando el constructor y con ningun parametro. La asignación “counts = {}” hace lo mismo que la anterior.

54. La expresión retorna: ["hello", "world", "hello", "LPP"]

55. > c.keys.sort.each { |k| puts c[k] }
2
2
1
 => [:a, :b, :c] 

Te escribe todos los valores de las claves y despues te retorna el nombre de cada una de ellas


Nombre: Jazer Abreu Chinea L02










